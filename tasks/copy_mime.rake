desc "Copy data from mime_types gem"
task :copy_mime do
  # The reason for this task is that mime/types has a large memory footprint,
  # but mail only uses a small portion of mime/types.  This extract only the
  # necessary data from mime/types that mail uses, reducing the amount of
  # memory used by 2/3.
  #
  # In general, this tasks should only run when the mime type data has been
  # updated in the mime-types, and a new version of mime-types has been released.
  # You can look at the mime-types page on rubygems.org to determine the release
  # date of the latest mime-types version: https://rubygems.org/gems/mime-types
  # You should be able to determine the update date of the mime-types data by
  # reviewing the commit log for mime-types:
  # https://github.com/halostatue/mime-types/commits/master/data/mime-types.json
  # 
  # This task is designed to be idempotent, so running it multiple
  # times should not have an effect.  So as long as you have installed the
  # most recent mime-types version, it should be safe to run this.
  #
  # The 2/3 reduction in memory was taken from these numbers:
  #
  # ruby RSS in KB:
  # without require mail: 6204
  # with require mail, using mime-types gem: 28860
  # with require mail, using internal mime type implementation: 14452

  require 'mime/types'

  caches = {}
  types = MIME::Types.send(:__types__)

  # Both of these are hashes inside MIME::Types.
  # For both, values are arrays of MIME::Type instances.
  # @extension_index is keyed by file extension.
  # @type_variants is keyed by content type.
  cache_types = [:@extension_index, :@type_variants]

  cache_types.each do |iv|
    h = caches[iv] = {}
    types.instance_variable_get(iv).each do |key, mime_types|
      # mail always uses the preferred type, so only keep that one.
      h[key] = mime_types.sort{|a, b| a.priority_compare(b)}.first
    end
  end

  File.open("lib/mail/mime_type/cache.rb", 'wb') do |f|
    f.puts '# This file was generated by the copy_mime rake task, do not modify'
    f.puts ''
    f.puts 'class Mail::MimeType'
    cache_types.each do |iv|
      f.puts "  #{iv} = {"
      caches[iv].sort.map do |key, mime_type|
        f.puts "    #{key.inspect} => #{'Binary.' if mime_type.binary?}new(#{mime_type.to_s.inspect}),"
      end
      f.puts "  }"
    end
    f.puts 'end'
  end
end

